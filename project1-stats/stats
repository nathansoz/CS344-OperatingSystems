#!/bin/bash

#Constants

DEBUG=1

COLS_ID="-c"
ROWS_ID="-r"

#globals

TO_PARSE="unset"

#I always get this from: http://stackoverflow.com/questions/59895/can-a-bash-script-tell-which-directory-it-is-stored-in
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

TMP_DATA="${SCRIPT_DIR}/input_data"
TMP_RM=($TMP_DATA)

## UTILITY FUNCTIONS ##

###################################################
# Function: print_help
#
#   Prints a usage statement and then exits
#      inputs:  none
#      outputs: none
#
##################################################
function print_help()
{
    echo "Usage: stats {-rows|-cols} [file]" 
}

###################################################
# Function: print_help
#
#   Prints a debugging statement if the Constants
#   DEBUG is set to 1
#
#      inputs:  none
#      outputs: none
#
##################################################
function debug()
{
    if [ "${DEBUG}" -ne "0" ]; then
        local dbgStr=${1} 
        (>&2 echo "${dbgStr}")
    fi
}

function exitWithCode()
{
    local exitCode=$1

    for i in ${TMP_RM[@]}; do
        if [ -f ${i} ]; then
            debug "remove ${i}"
            rm -f ${i}
        fi
    done

    debug "Exit with code ${exitCode}"
    exit ${exitCode}
}


function parse_arguments()
{
    if [[ "$#" -eq 0 ]]; then
        print_help
        exitWithCode 1
    fi

    if [[ ${1} == ${COLS_ID}* ]]; then
        debug "Columns"
        TO_PARSE="C"
    elif [[ ${1} == ${ROWS_ID}* ]]; then
        debug "Rows"
        TO_PARSE="R"
    else
        debug "Unknown"
        exitWithCode 1
    fi

    if [ "$#" -eq "1" ]; then
        cat > "${TMP_DATA}"
    elif [ "$#" -eq "2" ]; then
        cp $2 ${TMP_DATA}
    fi
}

function print_header()
{
    echo "Average Median"
}

function calculate_mean()
{
    declare -a arr=("${!1}")
    declare -a ret

    total=0
    for num in ${arr[@]}; do
        total=`expr ${total} + ${num}`
    done

    average=$(( (${total} + (${#arr[@]} / 2)) / ${#arr[@]} ))

    echo ${average}
}

function calculate_median
{
    declare -a arr=("${!1}")
    declare -a sorted

    checkOdd=$(( ${#arr[@]} % 2 ))
    medianIndex=$(( (${#arr[@]} / 2) ))

    sorted=( $(for num in ${arr[@]}; do
        echo ${num}
    done | sort) )

    if [ $checkOdd -eq 1 ]; then
        echo ${sorted[$medianIndex]}
    else
        secondIndex=$(( $medianIndex + 1 ))
        median=$(( ( ${sorted[$medianIndex]} + ${sorted[$secondIndex]} + 1 ) / 2  ))
        echo ${median}
    fi

}

function calculate()
{
    declare -a means
    declare -a medians

    if [ $TO_PARSE == "R" ]; then
        index=0
        while read -a fileLine; do
            means[$index]=$(calculate_mean fileLine[@])
            medians[$index]=$(calculate_median fileLine[@])
            index=$(($index + 1))
        done < "${TMP_DATA}"
    elif [ $TO_PARSE == "C" ]; then
        echo "COLS"
    else
        echo "Something bad has happened."
        exitWithCode 1
    fi

    for i in ${!means[@]}; do
        echo "${means[$i]}       ${medians[$i]}"
    done
}

#MAIN
parse_arguments $@
print_header
calculate
exitWithCode 0